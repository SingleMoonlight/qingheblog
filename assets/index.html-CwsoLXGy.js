import{_ as s,c as i,a as e,o as n}from"./app-WIG124Xj.js";const t="/assets/1679820126054-cee4e7f3-9ddd-4a06-af10-e0ce8815f04b-CHs20wLp.png",p="/assets/1679765489416-214bf53c-b526-45ec-977f-70ea0e1c10d2-Dv0okC8u.png",l="/assets/1679820163752-024fd180-9a50-4840-b970-97219f44e559-C4y3ilqr.png",r="/assets/1679820178447-c6411068-6119-4c6d-b018-e7e4d8ac3fe1-Cn2Vx0X6.png",h="/assets/1679820191842-025e347e-8fb7-4e82-bd9b-7b07326f866b-N8JfA7dc.png",d={};function o(c,a){return n(),i("div",null,a[0]||(a[0]=[e('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><blockquote><p>世界上并没有完美的程序，但我们并不因此而沮丧，因为写程序本来就是一个不断追求完美的过程。</p><p>——《深入理解 Java 虚拟机》</p></blockquote><p>说到 Java 大家都不陌生，它是一种面向对象的编程语言，具有功能强大和简单易用两个重要特征。Java 语言具有众多优点，其中一种就是平台独立与可移植，正是因为这个优点，借着互联网浪潮的 Java 迅速发展，这里离不开一个很重要的东西—— Java 虚拟机（Java Virtual Machine ，JVM ）。</p><p>JVM 本身的知识非常丰富，这篇文章也仅仅是对 JVM 的一个简单的解释，这个系列后续的文章会更深入地探讨 JVM 的详细知识。如果小伙伴想更加全面地了解 JVM ，推荐阅读周志明老师的《深入理解Java虚拟机》。</p><h2 id="java-跨平台的原因" tabindex="-1"><a class="header-anchor" href="#java-跨平台的原因"><span>Java 跨平台的原因</span></a></h2><h3 id="从-c-到-java" tabindex="-1"><a class="header-anchor" href="#从-c-到-java"><span>从 C++ 到 Java</span></a></h3><p>上世纪九十年代，硬件领域出现了单片式计算机系统（单片机），单片机的出现极大地提高了自动控制领域消费电子产品（电视机顶盒、移动电话等）的智能化程度。Sun 公司当然也希望抓住这次热潮，于是在1991年成立了一个称为 Green 的项目小组，专攻计算机在家电产品上的嵌入式应用。</p><p><img src="'+t+'" alt=""></p><p>C++ 语言在硬件领域的特殊优势，让研发人员决定使用 C++ 开发，但是单片机硬件资源极其匮乏，无法支撑 C++ 程序的运行，而且嵌入式处理器种类繁多，如何让程序可以跨平台运行就变成了一个很大问题。</p><p>因此，研发人员首先将精力放在了语言的研发上，他们并没有开发一种全新的语言，而是摒弃了 C++ 里一些不太实用及影响安全的成分，如指针、多继承等，推出了 Oak 面向对象语言，它也是 Java 的前身。</p><p>但是现在我们知道，在今天嵌入式的开发中，几乎都是使用 C/C++ 语言。在当时 Oak 出现时，由于各种原因，它并没有得到广泛地应用，于是团队重新分析市场需求，最后改变了努力的目标——万维网。</p><p>1995年互联网潮流的兴起，业界为了使死板、单调的静态网页能够“灵活”起来，急需一种软件技术来开发一种程序，这种程序可以通过网络传播并且能够跨平台运行。Oak 迅速找到了最适合自己发展的市场定位，成功转型，成为了现在的 Java（在申请注册商标时，发现 Oak 已经被人使用了，再想了一系列名字之后，最终使用了提议者在喝一杯 Java 咖啡时无意提到的 Java 词语）。</p><p><img src="'+p+'" alt=""></p><blockquote><p>Java 是几乎所有类型的网络应用程序的基础，也是开发和提供嵌入式和移动应用程序、游戏、基于 Web 的内容和企业软件的全球标准。Java 在全球各地有超过 900 万的开发人员，使您能够高效地开发、部署和使用精彩的应用程序和服务。</p><p>从笔记本电脑到数据中心，从游戏控制台到科学超级计算机，从手机到互联网，Java 无处不在！</p><p>——Java<a href="https://www.java.com/zh-CN/about/" target="_blank" rel="noopener noreferrer">官网</a></p></blockquote><h3 id="write-once-run-anywhere" tabindex="-1"><a class="header-anchor" href="#write-once-run-anywhere"><span>Write Once, Run Anywhere</span></a></h3><p>1995年5月23日，Oak 语言改名为 Java，并且在 SunWorld 大会上正式发布 Java 1.0 版本。Java 语言第一次提出了 “Write Once，Run Anywhere” 的口号。</p><p>Java 语言源程序经过编译，会被转换成字节码（bytes-codes）文件，字节码的最大特点就是可以跨平台运行。</p><p><img src="'+l+`" alt=""></p><p>这里有一个很重要的角色就是解释器，它负责“解释”字节码文件，也就是将字节码文件翻译成机器可以直接运行的代码，而任意一种解释器我们都可以称之为 Java 虚拟机（JVM），我们可以认为 Java 字节码就是 JVM 的机器码。</p><p>如果一台计算机，无论是什么操作系统，只要它包含了 Java 的虚拟机，它就可以运行任何正确的 Java 程序，也就实现了 Run Anywhere 。</p><p>一个简单的例子：</p><ol><li>使用记事本编写下面的代码，并将文件保存为 Helloworld.java ，注意类名和文件名相同。</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Helloworld</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Hello World!</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Windows 环境下打开 dos ，进入 Helloworld.java 文件目录下，使用下面的命令编译该程序。</li></ol><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>javac Helloworld.java</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="3"><li>可以看到文件目录下多了一个 Helloworld.class 文件，这个就是字节码文件，使用下面的命令可以运行该文件，可以看到 dos 打印出了程序运行结果。同样的，将该字节码文件放在任何安装了 JDK 或者 JRE 的电脑上，使用相同的命令都可以得到相同的结果。</li></ol><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>java Helloworld</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="什么是-jvm" tabindex="-1"><a class="header-anchor" href="#什么是-jvm"><span>什么是 JVM</span></a></h2><h3 id="jvm-本质" tabindex="-1"><a class="header-anchor" href="#jvm-本质"><span>JVM 本质</span></a></h3><p>JVM 是一个虚构出来的计算机，它没有寄存器，所以指令集是使用 Java 栈来存储中间数据，通过在实际的计算机上仿真模拟各种计算机功能来实现。它本质上就是一个程序，当它在命令行上启动的时候，就开始执行保存在某字节码文件中的指令。</p><p>引入 JVM 后，Java 语言在不同平台上运行时不需要重新编译。Java虚拟机屏蔽了与具体平台相关的信息，使得Java 程序只需生成在 Java 虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。</p><p><img src="`+r+'" alt=""></p><h3 id="jvm-家族" tabindex="-1"><a class="header-anchor" href="#jvm-家族"><span>JVM 家族</span></a></h3><p><img src="'+h+'" alt=""></p><p>JVM 有一个很庞大的家族，在不同的行业、不同的应用场景，程序运行的要求是不一样的，有很强的目标性，并不是所有的 JVM 都会被广泛应用，也不存在一种可以应用于所有场景的 JVM（也不一定，未来的事儿谁说的准呢哈）。</p><h2 id="为什么要学习-jvm" tabindex="-1"><a class="header-anchor" href="#为什么要学习-jvm"><span>为什么要学习 JVM</span></a></h2><h3 id="面试会问" tabindex="-1"><a class="header-anchor" href="#面试会问"><span>面试会问</span></a></h3><p>毫不夸张地说，绝大多数人开始学习 JVM 的首要原因是为了面试，当然我也不例外。</p><p>每年从事互联网的人员越来越多，门槛也随之变高（越来越卷），现在找 Java 相关工作，面试官都或多或少问 JVM 相关的知识，这时候如果一点都不会的话，是不是挺尴尬的。</p><p>这么说会有点应试之嫌，但事实确实如此。</p><h3 id="更加深入地了解-java" tabindex="-1"><a class="header-anchor" href="#更加深入地了解-java"><span>更加深入地了解 Java</span></a></h3><p>知识如果只停留在表层，几乎任何方向的能够胜任的职位也都只能停留在表层，至少程序员是如此。我们都有一颗不甘平凡的心，如果想超越自我，就需要追求更深层次的知识。</p><p>学习 Java 虚拟机能够让我们更深入地了解 Java 这门语言，可以清楚地知道 Java 程序是如何执行的，可以知道如何提高 Java 应用的性能等等。</p><h3 id="工作中会用得到" tabindex="-1"><a class="header-anchor" href="#工作中会用得到"><span>工作中会用得到</span></a></h3><p>正如文章开头所说，世界上并没有完美的程序，任何程序在部署上线后都会出现这样或那样的问题，那么如何解决线上的 Java 应用崩溃问题。</p><p>相对于 C/C++ 语言手动管理内存空间，JVM 从这个层面解放了程序员们，我们不需要花精力去对内存进行分配和管理，只需要去关注业务逻辑地实现。但是如果不理解 JVM GC 回收的原理，当出现内存泄露或溢出问题时，就没法或是很难进行排查和定位。</p>',46)]))}const k=s(d,[["render",o]]),g=JSON.parse('{"path":"/java/reacquaint-java/","title":"重新认识 Java","lang":"zh-CN","frontmatter":{"title":"重新认识 Java","createTime":"2023/03/26 08:39:44","permalink":"/java/reacquaint-java/","excerpt":"前言世界上并没有完美的程序，但我们并不因此而沮丧，因为写程序本来就是一个不断追求完美的过程。——《深入理解 Java 虚拟机》说到 Java 大家都不陌生，它是一种面向对象的编程语言，具有功能强大和简单易用两个重要特征。Java 语言具有众多优点，其中一种就是平台独立与可移植，正是因为这个优点...","outline":[2,6],"tags":null,"description":"前言 世界上并没有完美的程序，但我们并不因此而沮丧，因为写程序本来就是一个不断追求完美的过程。 ——《深入理解 Java 虚拟机》 说到 Java 大家都不陌生，它是一种面向对象的编程语言，具有功能强大和简单易用两个重要特征。Java 语言具有众多优点，其中一种就是平台独立与可移植，正是因为这个优点，借着互联网浪潮的 Java 迅速发展，这里离不开一个...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"重新认识 Java\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-30T12:52:17.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://blog.ifback.com/java/reacquaint-java/"}],["meta",{"property":"og:site_name","content":"青何博客"}],["meta",{"property":"og:title","content":"重新认识 Java"}],["meta",{"property":"og:description","content":"前言 世界上并没有完美的程序，但我们并不因此而沮丧，因为写程序本来就是一个不断追求完美的过程。 ——《深入理解 Java 虚拟机》 说到 Java 大家都不陌生，它是一种面向对象的编程语言，具有功能强大和简单易用两个重要特征。Java 语言具有众多优点，其中一种就是平台独立与可移植，正是因为这个优点，借着互联网浪潮的 Java 迅速发展，这里离不开一个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-30T12:52:17.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-30T12:52:17.000Z"}]]},"readingTime":{"minutes":7.2,"words":2161},"git":{"updatedTime":1732971137000,"contributors":[{"name":"SingleMoonlight","username":"SingleMoonlight","email":"winston.wyx@foxmail.com","commits":4,"avatar":"https://avatars.githubusercontent.com/SingleMoonlight?v=4","url":"https://github.com/SingleMoonlight"}]},"autoDesc":true,"filePathRelative":"笔记/Java 编程/2.Java 虚拟机/1.重新认识 Java.md","headers":[]}');export{k as comp,g as data};
