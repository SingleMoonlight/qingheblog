import{_ as s,c as a,a as e,o as t}from"./app-WIG124Xj.js";const n="/assets/1727622824125-9dd0efd3-b96c-4ea1-b113-2ae9dc03f1a8-Ditj9yiN.png",l="/assets/1727884212489-e1228296-06c2-4e17-9824-3afe4310c06c-CHwkxCo8.png",h={};function p(r,i){return t(),a("div",null,i[0]||(i[0]=[e('<h2 id="写在前面" tabindex="-1"><a class="header-anchor" href="#写在前面"><span>写在前面</span></a></h2><p>我们在开发引用第三方 API 时，往往需要用到 API 平台要求的 KEY，这些密钥在本地可以通过文件的形式引入到代码中，然后版本维护的时候不上传到 GitHub，这样可以一定程度上避免密钥泄露的风险，当我们使用 GitHub 进行打包编译的时候，又需要用到密钥，这时候就可以用 GitHub 提供的密钥管理工具管理我们的密钥。</p><h2 id="本地密钥" tabindex="-1"><a class="header-anchor" href="#本地密钥"><span>本地密钥</span></a></h2><p>这里本地的密钥是通过 vite 环境变量的方式引用，即将密钥写在单独的环境变量文件 .env 中，然后在 .gitignore 中忽略 .env 文件。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">VITE_MY_PRAVITE_KEY</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">xxxxxxxxxxxx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>代码里就可以通过如下方式直接使用：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">meta</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">env</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">VITE_MY_PRAVITE_KEY</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="github-密钥" tabindex="-1"><a class="header-anchor" href="#github-密钥"><span>GitHub 密钥</span></a></h2><h3 id="创建密钥" tabindex="-1"><a class="header-anchor" href="#创建密钥"><span>创建密钥</span></a></h3><p>在代码仓库 <code>Setting</code>-&gt;<code>Actions secrets and variables</code>-&gt;<code>Actions</code>-&gt;<code>Repository secrets</code>中新建一个密钥。</p><p><img src="'+n+'" alt=""></p><p>输入密钥名称和密钥，点击添加即可：</p><p><img src="'+l+`" alt=""></p><h3 id="使用密钥" tabindex="-1"><a class="header-anchor" href="#使用密钥"><span>使用密钥</span></a></h3><p>然后在 GitHub Aciton 的部署文件 deploy.xml 中就可以通过如下方式进行引用：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"># </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">其他构建步骤</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Set</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> environment</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> secrets</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  env</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    VITE_MY_PRAVITE_KEY</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> \${{ secrets.VITE_MY_PRAVITE_KEY }}</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  run</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    touch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> .</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">env</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    echo</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">VITE_MY_PRAVITE_KEY = VITE_MY_PRAVITE_KEY</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> .</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">env</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"># </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">其他构建步骤</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里就是在原本的部署流程中添加了一个创建环境变量文件的步骤，将环境变量写入 .env 文件中，然后再进行构建，这样就达到了和本地打包构建一样的效果。</p><p>在构建完成后，构建环境会直接被清除，因此上述步骤中创建的文件也并不会被保存。</p>`,18)]))}const c=s(h,[["render",p]]),k=JSON.parse('{"path":"/article/use-secret-in-github-action/","title":"在 GitHub Action 中使用密钥","lang":"zh-CN","frontmatter":{"title":"在 GitHub Action 中使用密钥","createTime":"2024/09/28 15:24:49","permalink":"/article/use-secret-in-github-action/","excerpt":"写在前面我们在开发引用第三方 API 时，往往需要用到 API 平台要求的 KEY，这些密钥在本地可以通过文件的形式引入到代码中，然后版本维护的时候不上传到 GitHub，这样可以一定程度上避免密钥泄露的风险，当我们使用 GitHub 进行打包编译的时候，又需要用到密钥，这时候就可以用 Git...","outline":[2,6],"tags":["GitHub"],"description":"写在前面 我们在开发引用第三方 API 时，往往需要用到 API 平台要求的 KEY，这些密钥在本地可以通过文件的形式引入到代码中，然后版本维护的时候不上传到 GitHub，这样可以一定程度上避免密钥泄露的风险，当我们使用 GitHub 进行打包编译的时候，又需要用到密钥，这时候就可以用 GitHub 提供的密钥管理工具管理我们的密钥。 本地密钥 这里...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在 GitHub Action 中使用密钥\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-30T13:15:27.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://blog.ifback.com/article/use-secret-in-github-action/"}],["meta",{"property":"og:site_name","content":"青何博客"}],["meta",{"property":"og:title","content":"在 GitHub Action 中使用密钥"}],["meta",{"property":"og:description","content":"写在前面 我们在开发引用第三方 API 时，往往需要用到 API 平台要求的 KEY，这些密钥在本地可以通过文件的形式引入到代码中，然后版本维护的时候不上传到 GitHub，这样可以一定程度上避免密钥泄露的风险，当我们使用 GitHub 进行打包编译的时候，又需要用到密钥，这时候就可以用 GitHub 提供的密钥管理工具管理我们的密钥。 本地密钥 这里..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-30T13:15:27.000Z"}],["meta",{"property":"article:tag","content":"GitHub"}],["meta",{"property":"article:modified_time","content":"2024-11-30T13:15:27.000Z"}]]},"readingTime":{"minutes":1.83,"words":550},"git":{"updatedTime":1732972527000,"contributors":[{"name":"SingleMoonlight","username":"SingleMoonlight","email":"winston.wyx@foxmail.com","commits":4,"avatar":"https://avatars.githubusercontent.com/SingleMoonlight?v=4","url":"https://github.com/SingleMoonlight"}]},"autoDesc":true,"filePathRelative":"编程/在 GitHub Action 中使用密钥.md","headers":[],"categoryList":[{"id":"41282b","sort":10007,"name":"编程"}]}');export{c as comp,k as data};
