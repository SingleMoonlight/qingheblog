import{_ as t,c as i,a as o,o as a}from"./app-WIG124Xj.js";const l={};function c(n,e){return a(),i("div",null,e[0]||(e[0]=[o('<h2 id="写在前面" tabindex="-1"><a class="header-anchor" href="#写在前面"><span>写在前面</span></a></h2><p>在逛 GitHub 的时候，发现很多人的 GitHub 提交说明格式很统一，后面也无意间刷到了一些人汇总的 Git 标记和命名习惯，感觉挺有用，这里记录下来。当然每个公司内部应该会有自己形成的一套规则，在工作的时候还是要遵守公司内部的规范。</p><h2 id="提交信息标记" tabindex="-1"><a class="header-anchor" href="#提交信息标记"><span>提交信息标记</span></a></h2><p>在使用 Git 进行版本控制的时候，规范的提交信息有助于团队成员快速了解每次提交的主要内容，以下是一些常用的提交信息标记及其含义。</p><ul><li><strong>feat</strong>：新功能或者特性 <ul><li>示例：<code>feat: 添加用户登录功能</code></li></ul></li><li><strong>fix</strong>：修复一个 bug <ul><li>示例：<code>fix: 修复登录页面的崩溃问题</code></li></ul></li><li><strong>docs</strong>：仅仅修改了文档，比如 README、注释等 <ul><li>示例：<code>docs: 更新 README 文档</code></li></ul></li><li><strong>style</strong>：代码格式的修改，不影响代码的逻辑，例如空格、格式化、缺少分号等 <ul><li>示例：<code>style: 统一代码格式</code></li></ul></li><li><strong>refactor</strong>：代码重构，既不是新增功能，也不是修复 bug <ul><li>示例：<code>refactor: 重构用户认证模块</code></li></ul></li><li><strong>perf</strong>：提升性能的代码更改 <ul><li>示例：<code>perf: 优化数据库查询性能</code></li></ul></li><li><strong>test</strong>：添加或者修改测试代码 <ul><li>示例：<code>test: 添加用户登录功能的单元测试</code></li></ul></li><li><strong>chore</strong>：其他不修改 src 或者测试文件的杂物，例如构建过程或者辅助工具的变动 <ul><li>示例：<code>chore: 更新构建工具版本</code></li></ul></li><li><strong>build</strong>：影响构建系统或者外部依赖的更改，例如 gulp、npm、webpack <ul><li>示例：<code>build: 更新 webpack 配置</code></li></ul></li><li><strong>ci</strong>：持续集成相关的更改，例如 Travis、Circle、Jenkins 配置文件 <ul><li>示例：<code>ci: 配置 Travis CI</code></li></ul></li><li><strong>revert</strong>：回滚某次提交 <ul><li>示例：<code>revert: 回滚上一次提交</code></li></ul></li></ul><h2 id="分支命名" tabindex="-1"><a class="header-anchor" href="#分支命名"><span>分支命名</span></a></h2><p>在协同开发中，合理的分支命名有助于提高代码管理的效率和可读性，以下是一些常见的分支命名规范。</p><h3 id="主分支" tabindex="-1"><a class="header-anchor" href="#主分支"><span>主分支</span></a></h3><ul><li><code>main</code>或者<code>master</code>，主分支，存放稳定的生产代码。</li><li><code>develop</code>：开发分支，存放最新的开发代码。</li></ul><h3 id="功能分支" tabindex="-1"><a class="header-anchor" href="#功能分支"><span>功能分支</span></a></h3><p>功能分支用于开发新的功能，通常从<code>develop</code>或者<code>main</code>分支创建，完成后合并回原分支。</p><p>命名格式：<code>feature/描述</code></p><p>示例：</p><ul><li><code>feature/user-authentication</code></li><li><code>feature/payment-integration</code></li></ul><h3 id="修复分支" tabindex="-1"><a class="header-anchor" href="#修复分支"><span>修复分支</span></a></h3><p>修复分支用于修复代码中的 bug，通常从<code>develop</code>或<code>main</code>分支创建，完成后合并回原分支。</p><p>命名格式：<code>bugfix/描述</code></p><p>示例：</p><ul><li><code>bugfix/fix-login-error</code></li><li><code>bugfix/correct-typo</code></li></ul><h3 id="发布分支" tabindex="-1"><a class="header-anchor" href="#发布分支"><span>发布分支</span></a></h3><p>发布分支用于准备发布版本，通常从<code>develop</code>或<code>main</code>分支创建，完成后合井回原分支。</p><p>命名格式：<code>release/版本号</code></p><p>示例：</p><ul><li><code>release/ 1.0.0</code></li><li><code>release/2.1.0</code></li></ul><h3 id="热修复分支" tabindex="-1"><a class="header-anchor" href="#热修复分支"><span>热修复分支</span></a></h3><p>热修复分支用于紧急修复生产环境中的问题，通常从<code>develop</code>或<code>main</code>分支创建，完成后合井回原分支。</p><p>命名格式：<code>hotfix/描述</code></p><p>示例：</p><ul><li><code>hotfix/critical-bug</code></li></ul>',29)]))}const d=t(l,[["render",c]]),s=JSON.parse('{"path":"/article/git-tags-and-naming-conventions/","title":"Git 标记和命名习惯","lang":"zh-CN","frontmatter":{"title":"Git 标记和命名习惯","createTime":"2025/04/07 14:52:40","permalink":"/article/git-tags-and-naming-conventions/","excerpt":"写在前面在逛 GitHub 的时候，发现很多人的 GitHub 提交说明格式很统一，后面也无意间刷到了一些人汇总的 Git 标记和命名习惯，感觉挺有用，这里记录下来。当然每个公司内部应该会有自己形成的一套规则，在工作的时候还是要遵守公司内部的规范。提交信息标记在使用 Git 进行版本控制的时候...","outline":[2,6],"tags":["Git","GitHub"],"description":"写在前面 在逛 GitHub 的时候，发现很多人的 GitHub 提交说明格式很统一，后面也无意间刷到了一些人汇总的 Git 标记和命名习惯，感觉挺有用，这里记录下来。当然每个公司内部应该会有自己形成的一套规则，在工作的时候还是要遵守公司内部的规范。 提交信息标记 在使用 Git 进行版本控制的时候，规范的提交信息有助于团队成员快速了解每次提交的主要内...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Git 标记和命名习惯\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-08T15:08:30.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://blog.ifback.com/article/git-tags-and-naming-conventions/"}],["meta",{"property":"og:site_name","content":"青何博客"}],["meta",{"property":"og:title","content":"Git 标记和命名习惯"}],["meta",{"property":"og:description","content":"写在前面 在逛 GitHub 的时候，发现很多人的 GitHub 提交说明格式很统一，后面也无意间刷到了一些人汇总的 Git 标记和命名习惯，感觉挺有用，这里记录下来。当然每个公司内部应该会有自己形成的一套规则，在工作的时候还是要遵守公司内部的规范。 提交信息标记 在使用 Git 进行版本控制的时候，规范的提交信息有助于团队成员快速了解每次提交的主要内..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-08T15:08:30.000Z"}],["meta",{"property":"article:tag","content":"GitHub"}],["meta",{"property":"article:tag","content":"Git"}],["meta",{"property":"article:modified_time","content":"2025-04-08T15:08:30.000Z"}]]},"readingTime":{"minutes":2.93,"words":880},"git":{"updatedTime":1744124910000,"contributors":[{"name":"SingleMoonlight","username":"SingleMoonlight","email":"winston.wyx@foxmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/SingleMoonlight?v=4","url":"https://github.com/SingleMoonlight"}]},"autoDesc":true,"filePathRelative":"编程/Git 标记和命名习惯.md","headers":[],"categoryList":[{"id":"41282b","sort":10007,"name":"编程"}]}');export{d as comp,s as data};
